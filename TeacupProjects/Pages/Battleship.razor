@page "/battleship"
@page "/battleship/{id}"
@using TeacupProjects.Battleship
@using TeacupProjects.Battleship.Signal
@inject NavigationManager NavigationManager
@inject IBattleshipClient BattleshipClient
<h3>Battleship</h3>
@if (string.IsNullOrEmpty(id))
{
    <button @onclick="StartGame">Start Game</button>
}
else
{
    <p>Id: @id</p>
    <p>Url: @NavigationManager.Uri</p>
    
    <button @onclick="Send" disabled="@(!BattleshipClient.IsConnected)">Send</button>
    <p>Connected: @BattleshipClient.IsConnected</p>
    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
    
    <table>
        @for (int i = 0; i < 10; i++)
        {
            int y = i;
            <tr>
                @for (int j = 0; j < 10; j++)
                {
                    int x = j;
                    <td class="@myBoard?.cells[x,y]?.Classes"
                        @onmousedown="e => OnMouseDownMyBoard(e, (x,y))"
                        @onmouseover='e => OnMouseOverMyBoard(e, (x,y))'
                        @onmouseout='e => OnMouseOffMyBoard(e, (x,y))'
                        @oncontextmenu='_ => { }'
                        @oncontextmenu:preventDefault="true">?</td>
                }
            </tr>
        }
    </table>
    
    <p role="status">@status</p>
}


@code {
    [Parameter]
    public string? id { get; set; }
    private string? connectionId = null;
    private string? opponentConnectionId = null;
    private List<string> messages = new List<string>();
    private Board myBoard = new Board();
    private List<Ship> shipsToPlace = new List<Ship>()
    {
        new Ship.Carrier(),
        new Ship.Battleship(),
        new Ship.Cruiser(),
        new Ship.Submarine(),
        new Ship.Destroyer()
    };
    private string status = string.Empty;
    
    void StartGame()
    {
        NavigationManager.NavigateTo($"/battleship/{Guid.NewGuid()}", true);
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(id))
        {
            BattleshipClient.OnJoin(OnJoin);
            BattleshipClient.OnAcceptJoin(OnAcceptJoin);
            BattleshipClient.OnRejectJoin(OnRejectJoin);
            BattleshipClient.OnSend(OnSend);
            
            // get my connection id
            await BattleshipClient.Start();
            connectionId = BattleshipClient.ConnectionId;
            await BattleshipClient.Join(id, connectionId);
        }
    }
    
    private async Task Send() => await BattleshipClient.Send(Guid.NewGuid().ToString());

    private async Task OnSend(string message)
    {
        messages.Add(message);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnJoin(string pageId, string incomingConnectionId)
    {
        if (pageId != id)
        {
            messages.Add($"Ignoring {incomingConnectionId} for {pageId}");
        } else if (incomingConnectionId == connectionId)
        {
            messages.Add($"It's me! {connectionId}");
        } else if (opponentConnectionId is null)
        {
            messages.Add($"Letting {incomingConnectionId} join.");
            opponentConnectionId = incomingConnectionId;
            await BattleshipClient.AcceptJoin(connectionId);
        }
        else
        {
            messages.Add($"Rejecting {incomingConnectionId}");
            await BattleshipClient.RejectJoin("Game already in progress");
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAcceptJoin(string incomingConnectionId)
    {
        if (incomingConnectionId == connectionId)
        {
            messages.Add($"I'm accepting me! {connectionId}");
        } else if (opponentConnectionId is null)
        {
            opponentConnectionId = incomingConnectionId;
            messages.Add($"Joined game against: {incomingConnectionId}");
        }
        else
        {
            messages.Add($"Client ({incomingConnectionId}) accepted me, but I already have an opponent ({opponentConnectionId})");
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnRejectJoin(string message)
    {
        messages.Add(message);
        await InvokeAsync(StateHasChanged);
    }

    // https://blog.hagoodit.com/2021/08/28/strongly-typed-signal-r-client-and-server/
    // use the above to build a proper client
    

    private void OnMouseOverMyBoard(MouseEventArgs obj, (int x, int y) coords)
    {
        if (shipsToPlace.Any())
        {
            var cell = myBoard.cells[coords.x, coords.y];
            shipsToPlace.First().CanPlace(cell);
            status = $"({coords.x}, {coords.y})";
        }
    }
    
    private void OnMouseOffMyBoard(MouseEventArgs obj, (int x, int y) coords)
    {
        if (shipsToPlace.Any())
        {
            var cell = myBoard.cells[coords.x, coords.y];
            cell.ClearPlacementIndicator();
        }
    }
    
    private void OnMouseDownMyBoard(MouseEventArgs obj, (int x, int y) coords)
    {
        if (shipsToPlace.Any())
        {
            var ship = shipsToPlace.First();
            if (obj.Button == 0)
            {
                var cell = myBoard.cells[coords.x, coords.y];
                if (ship.TryPlace(cell))
                {
                    shipsToPlace.RemoveAt(0);
                }
            } 
            else if (obj.Button == 2)
            {
                ship.ToggleOrientation();
            }
        }
    }
}