@page "/battleship"
@page "/battleship/{id}"
@rendermode @(new InteractiveServerRenderMode(false))
@using TeacupProjects.Battleship.Signal
@using TeacupProjects.Battleship
@using System.Runtime.InteropServices
@inject NavigationManager NavigationManager
@inject IBattleshipClient BattleshipClient
<h3>Battleship</h3>
@if (string.IsNullOrEmpty(id))
{
    <button @onclick="StartGame">Start Game</button>
}
else if (!isConnected)
{
    <p>Loading...</p>
}
else
{
    <p>Id: @id</p>
    <p>Url: <a href="@NavigationManager.Uri">@NavigationManager.Uri</a></p>
    
    <p>
        <label>Username</label>
        <input type="text" @bind="@PendingName" @bind:event="oninput"/>
        @if (nameChanged)
        {
            <button @onclick="ChangeName">Change Name</button>
        }
    </p>
    
    <p>
        <label>Send Message</label>
        <div>
            <textarea rows="2" @bind="@PendingMessage"></textarea>
        </div>
        <div>
            <button @onclick="Send" disabled="@(!BattleshipClient.IsConnected)">Send</button>
        </div>
    </p>
    
    <table>
        <thead>
        <tr>
            <th>Player</th>
            <th>Ready</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>@(string.IsNullOrEmpty(myName) ? myId : myName)</td>
            <td>@isReady</td>
        </tr>
        @foreach (var player in otherPlayers)
        {
            <tr>
                <td>@(string.IsNullOrEmpty(player.Value.name) ? player.Key : player.Value.name)</td>
                <td>@player.Value.isReady</td>
            </tr>
        }
        </tbody>
    </table>
    
    <p>Connected: @BattleshipClient.IsConnected</p>
    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
    
    <p role="status">@isReady</p>
    
    <!-- my board -->
    <table>
        @for (int i = 0; i < 10; i++)
        {
            int y = i;
            <tr>
                @for (int j = 0; j < 10; j++)
                {
                    int x = j;
                    <td class="@myBoard?.cells[x,y]?.Classes"
                        @onmousedown="e => OnMouseDownMyBoard(e, (x,y))"
                        @onmouseover='e => OnMouseOverMyBoard(e, (x,y))'
                        @onmouseout='e => OnMouseOffMyBoard(e, (x,y))'
                        @oncontextmenu='_ => { }'
                        @oncontextmenu:preventDefault="true">?</td>
                }
            </tr>
        }
    </table>
    <p role="status">@status</p>
    
    
}


@code {
    [Parameter]
    public string? id { get; set; }
    
    // is connected
    private bool isConnected;

    // my unique ID
    private string myId = Guid.NewGuid().ToString();
    // my player name
    private string? myName;

    private string? _pendingName;
    private string PendingName
    {
        get => _pendingName ?? String.Empty;
        set
        {
            if (_pendingName == value)
                return;
            _pendingName = value;
            nameChanged = !string.IsNullOrWhiteSpace(_pendingName) && !_pendingName.Equals(myName);
        } 
    }
    private bool nameChanged = false;
    
    // message
    private string? _pendingMessage;
    private string PendingMessage
    {
        get => _pendingMessage ?? string.Empty;
        set => _pendingMessage = value;
    }
    
    // other players
    private Dictionary<string, Player> otherPlayers = new();
    
    // ready
    private bool isReady = false;
    
    // game started
    private bool gameStarted = false;
    
    private List<string> messages = new List<string>();
    private Board myBoard = new Board();
    private List<Ship> shipsToPlace = new List<Ship>()
    {
        new Ship.Carrier(),
        new Ship.Battleship(),
        new Ship.Cruiser(),
        new Ship.Submarine(),
        new Ship.Destroyer()
    };

    private int countDown = 10;
    private string status = string.Empty;
    
    void StartGame()
    {
        NavigationManager.NavigateTo($"/battleship/{Guid.NewGuid()}", true);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(id))
            {
                BattleshipClient.OnPlayerJoined(OnPlayerJoined);
                BattleshipClient.OnPlayerWelcomed(OnPlayerWelcomed);
                BattleshipClient.OnPlayerChangedName(OnPlayerChangedName);
                BattleshipClient.OnMessageReceived(OnMessageReceived);
                BattleshipClient.OnPlayerReady(OnPlayerReady);

                await BattleshipClient.Start();
                await BattleshipClient.JoinRoom(id, myId);
            }
            isConnected = true;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task ChangeName()
    {
        if (string.IsNullOrWhiteSpace(PendingName) || PendingName.Equals(myName))
            return;
        
        myName = PendingName;
        await BattleshipClient.DeclareName(id, myId, myName);
        nameChanged = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(PendingMessage))
        {
            messages.Add(string.IsNullOrWhiteSpace(myName) 
                ? $"[{myId}] {PendingMessage}"
                : $"[{myName}] {PendingMessage}");
            await BattleshipClient.BroadcastMessage(id, myId, PendingMessage);
            PendingMessage = string.Empty;
        }
    } 

    private async Task OnMessageReceived(string roomId, string from, string message)
    {
        otherPlayers.TryGetValue(from, out var player);
        messages.Add(
            string.IsNullOrEmpty(player?.name)
            ? $"[{from}]: {message}" 
            : $"[{player.name}]: {message}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnPlayerJoined(string roomId, string incomingId)
    {
        if (myId.Equals(incomingId))
            return;
        
        if (!otherPlayers.ContainsKey(incomingId))
        {
            otherPlayers.TryAdd(incomingId, new Player { id = incomingId });
            messages.Add($"Player {incomingId} joined.");
        }

        await BattleshipClient.WelcomePlayer(id, myId, myName);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnPlayerWelcomed(string roomId, string incomingId, string? incomingName)
    {
        if (otherPlayers.TryAdd(incomingId, new Player { name = incomingName }))
        {
            messages.Add($"{incomingName ?? "Player"} [{incomingId}] welcomed you.");
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnPlayerChangedName(string roomId, string incomingId, string incomingName)
    {
        otherPlayers.TryGetValue(incomingId, out var player);
        var oldName = player?.name;
        otherPlayers[incomingId].name = incomingName;
        messages.Add($"{oldName ?? "Player"} [{incomingId}] changed their name to {incomingName}");
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnPlayerReady(string roomId, string playerId)
    {
        otherPlayers.TryGetValue(playerId, out var player);
        if (player != null)
        {
            player.isReady = true;
            messages.Add($"{NameOrPlayerWithId(playerId)} is ready.");
        }
        else if (myId.Equals(playerId))
        {
            messages.Add($"I am ready");
        }
        else
        {
            messages.Add($"[OnPlayerReady] No player with id {playerId}");
            return;
        }

        if (otherPlayers.Where(p => p.Value.isReady).Count() + (isReady ? 1 : 0) > 1)
        {
            // start countdown
        }
        await InvokeAsync(StateHasChanged);
    }

    private string NameOrId(Player player) => string.IsNullOrEmpty(player.name) ? player.id : player.name;

    private string NameOrPlayerWithId(string id)
    {
        otherPlayers.TryGetValue(id, out var player);
        return string.IsNullOrEmpty(player?.name) ? $"Player [{id}]" : $"{player.name} [{id}]";
    }
    
    private void Ready()
    {
        isReady = true;
    }

    private void OnMouseOverMyBoard(MouseEventArgs obj, (int x, int y) coords)
    {
        if (shipsToPlace.Any())
        {
            var cell = myBoard.cells[coords.x, coords.y];
            shipsToPlace.First().CanPlace(cell);
            status = $"({coords.x}, {coords.y})";
        }
    }
    
    private async Task OnMouseOffMyBoard(MouseEventArgs obj, (int x, int y) coords)
    {
        if (isReady)
            return;
        
        if (!shipsToPlace.Any())
        {
            await DeclareReady();
            return;
        }
        
        var cell = myBoard.cells[coords.x, coords.y];
        cell.ClearPlacementIndicator();
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeclareReady()
    {
        isReady = true;
        await BattleshipClient.DeclareReady(id, myId);
        await InvokeAsync(StateHasChanged);
    }

    private void OnMouseDownMyBoard(MouseEventArgs obj, (int x, int y) coords)
    {
        if (shipsToPlace.Any())
        {
            var ship = shipsToPlace.First();
            if (obj.Button == 0)
            {
                var cell = myBoard.cells[coords.x, coords.y];
                if (ship.TryPlace(cell))
                {
                    shipsToPlace.RemoveAt(0);
                }
            } 
            else if (obj.Button == 2)
            {
                ship.ToggleOrientation();
            }
        }
    }
}